plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.github.spotbugs' version '6.0.4'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    // Google Cloud Functions
    implementation 'com.google.cloud.functions:functions-framework-api:1.1.0'
    
    // Google Cloud AI Platform (Vertex AI for Gemini)
    implementation 'com.google.cloud:google-cloud-aiplatform:3.45.0'
    
    // Google Cloud clients
    implementation 'com.google.cloud:google-cloud-storage:2.36.0'
    implementation 'com.google.cloud:google-cloud-firestore:3.20.0'
    implementation 'com.google.cloud:google-cloud-pubsub:1.129.3'
    
    // Shared dependencies from shared module
    implementation project(':shared')
    
    // Google Guice for dependency injection
    implementation 'com.google.inject:guice:7.0.0'
    
    // Configuration
    implementation 'com.typesafe:config:1.4.3'
    
    // JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.1'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'ch.qos.logback:logback-classic:1.4.14'
    implementation 'com.google.cloud:google-cloud-logging-logback:0.131.8-alpha'
    
    // Validation
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    
    // Apache Commons
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'org.apache.commons:commons-text:1.11.0'
    
    // Rate limiting
    implementation 'com.google.guava:guava:33.0.0-jre'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
    
    // Resilience
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-ratelimiter:2.2.0'
    
    // Monitoring
    implementation 'io.micrometer:micrometer-core:1.12.3'
    implementation 'io.micrometer:micrometer-registry-stackdriver:1.12.3'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.mockito:mockito-core:5.10.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.10.0'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'com.google.truth:truth:1.4.0'
    
    // Integration testing
    testImplementation 'org.testcontainers:testcontainers:1.19.5'
    testImplementation 'org.testcontainers:gcloud:1.19.5'
    testImplementation 'com.google.cloud:google-cloud-firestore:3.20.0'
    
    // Cloud Functions testing
    testImplementation 'com.google.cloud.functions:functions-framework-api:1.1.0'
    testImplementation 'com.google.cloud.functions.invoker:java-function-invoker:1.3.1'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

shadowJar {
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'com.google.cloud.functions.invoker.runner.Invoker'
    }
}

spotbugs {
    excludeFilter = file("${rootProject.projectDir}/config/spotbugs/exclude.xml")
}

tasks.named('build') {
    dependsOn 'shadowJar'
}

jar {
    manifest {
        attributes(
            'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
        )
    }
}