/**
 * Edge function for SPA routing
 * Generated by Terraform - DO NOT EDIT MANUALLY
 */

const SPA_APPS = ${jsonencode(spa_apps)};

// Static file extensions that should be served directly
const STATIC_EXTENSIONS = new Set([
  'js', 'css', 'png', 'jpg', 'jpeg', 'gif', 'svg', 'ico',
  'woff', 'woff2', 'ttf', 'eot', 'json', 'xml', 'txt', 'webp',
  'mp4', 'webm', 'ogg', 'mp3', 'wav', 'pdf', 'zip'
]);

// Known static directories
const STATIC_DIRS = ['/assets', '/static', '/public', '/images', '/fonts', '/_next', '/.well-known'];

/**
 * Determines if a path is a static file based on extension
 */
function isStaticFile(path) {
  const lastDot = path.lastIndexOf('.');
  if (lastDot === -1) return false;
  
  const extension = path.substring(lastDot + 1).toLowerCase();
  return STATIC_EXTENSIONS.has(extension);
}

/**
 * Checks if path is in a known static directory
 */
function isInStaticDir(path) {
  return STATIC_DIRS.some(dir => path.startsWith(dir + '/'));
}

/**
 * Finds the matching SPA app for a given path
 */
function findMatchingApp(path) {
  for (const [appName, config] of Object.entries(SPA_APPS)) {
    if (path === config.base_path || path.startsWith(config.base_path + '/')) {
      return { name: appName, config };
    }
  }
  return null;
}

/**
 * Main request handler
 */
export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url);
    const path = url.pathname;
    
    // API routes - pass through
    if (path.startsWith('/api/')) {
      return fetch(request);
    }
    
    // Static files - pass through
    if (isStaticFile(path) || isInStaticDir(path)) {
      const response = await fetch(request);
      // If file exists, return it
      if (response.status !== 404) {
        return response;
      }
      // If it's a 404 for a static file, return the 404
      if (isStaticFile(path)) {
        return response;
      }
    }
    
    // Check if this is a SPA route
    const app = findMatchingApp(path);
    if (app) {
      // Rewrite to the app's index.html
      const indexPath = `$${app.config.base_path}/index.html`;
      const indexUrl = new URL(indexUrl, request.url);
      
      // Create new request with original headers
      const indexRequest = new Request(indexUrl, {
        method: request.method,
        headers: request.headers,
        redirect: 'manual'
      });
      
      // Fetch index.html
      const response = await fetch(indexRequest);
      
      // Create new response with additional headers
      const headers = new Headers(response.headers);
      headers.set('X-Original-Path', path);
      headers.set('X-SPA-App', app.name);
      headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
      
      return new Response(response.body, {
        status: response.status,
        statusText: response.statusText,
        headers
      });
    }
    
    // Default: pass through
    return fetch(request);
  }
};